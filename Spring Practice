Spring DI(Dpendency Ingestion)

Spring IOC(Inversion of control)

Spring AOP-Aspect of oriented programming

Spring Autowiring

Spring JDBC

Spring ORM  ->object relational mapping

Spring MVC

Spring Boot


Spring Singleton:

Spring Prototype:

Spring Inheritance (parent):

Spring Lazy Init(Constructor):

ref keyword is used for dependency ingestion-->the alternative is autowiring(it 
is invoked automatically)

Auto wiring:(Implicit dependency ingestion)

By Name
By Type
By Constructor
auto detect

Aspects oriented programming(AOP)
before. after,around,throws







Config.xml:

<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN"
"http://www.springframework.org/dtd/spring-beans-2.0.dtd">
<beans>
<bean id="id1" class="com.surya.spring.HelloSpring">
    <property name="message"  value="Welcome to Spring"/>
</bean>
<bean id="single" class="com.surya.spring.HelloSpring" scope="singleton"/>
<bean id="prototype" class="com.surya.spring.HelloSpring" scope="prototype"/>
<bean id="p"  class="com.surya.spring.Parent">

constructor-arg

ref-> it is refered to another pojo class
    <property name="number" value="100"/>
</bean>
<bean id="child" class="com.surya.spring.Child" parent="p"/>
<bean id="first"  class="com.surya.spring.FirstBean" lazy-init="false"/>
<bean id="second"  class="com.surya.spring.Secondbean" lazy-init="true"/>
</beans>


DispatcherServelet(web.xml) Front Controller

  ---HandlerMapping(spring config file)
  ---Controller extends AbstractController(ModelAndView)
  ---Internal View Resolver
  ---Index.jsp
  ---Request Mappings(2)
  ---view(jsp)
